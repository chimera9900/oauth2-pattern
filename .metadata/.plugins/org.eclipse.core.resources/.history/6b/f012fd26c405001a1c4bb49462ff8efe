package com.developer.ui;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ResolvableType;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ModelAttribute;

@ControllerAdvice
public class DefaultControllerAdvice {
	
	private ClientRegistrationRepository clientRegistrationRepository;
	private OAuth2AuthorizedClientService authorizedClientService;
	
	@Autowired
	public DefaultControllerAdvice(ClientRegistrationRepository clientRegistrationRepository,
			OAuth2AuthorizedClientService authorizedClientService) {
		this.clientRegistrationRepository = clientRegistrationRepository;
		this.authorizedClientService = authorizedClientService;
	}
	
	@ModelAttribute("currentUser")
	public UserModel currentUser(OAuth2AuthenticationToken token) {
		
		UserModel userModel = new UserModel();
		if(token != null) {
			OidcUser oidcUser = (OidcUser) token.getPrincipal();
			userModel.setUserId(oidcUser.getSubject());
			userModel.setFirstName(oidcUser.getGivenName());
			userModel.setLastName(oidcUser.getFamilyName());
			userModel.setEmail(oidcUser.getEmail());
		}
		
		return userModel;
		
	}
	
	@ModelAttribute("idTokenClaims")
	public Map<String,Object> idTokenClaims(OAuth2AuthenticationToken token){
		if(token == null) {
			return Collections.EMPTY_MAP;
		}
		OidcUser oidcUser = (OidcUser) token.getPrincipal();
		final List<String> claimNames = Arrays.asList("iss", "sub", "aud", "azp", "given_name", "family_name", "email");
		return oidcUser.getClaims()
				.entrySet()
				.stream()
				.filter(e -> claimNames.contains(e.getKey()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))
				;
	}
	
	List<AuthorizedClientRegistrationModel> authorizedClientRegistrations(OAuth2AuthenticationToken token){
		if(clientRegistrationRepository == null) {
			return Collections.EMPTY_LIST;
		}
		List<AuthorizedClientRegistrationModel> authorizedClientRegistrations = new ArrayList<>();
		getClientRegistrations().forEach(registration -> {
			OAuth2AuthorizedClient authorizedClient = null;
			if(authorizedClientService != null) {
				authorizedClient = authorizedClientService.loadAuthorizedClient(
						registration.getRegistrationId(), token.getName());
			}
			authorizedClientRegistrations.add(new AuthorizedClientRegistrationModel(authorizedClient))
		});
		
	}
	
	
	
	private List<ClientRegistration> getClientRegistrations(){
		ResolvableType type = ResolvableType.forInstance(clientRegistrationRepository).as(Iterable.class);
		if(type != ResolvableType.NONE && ClientRegistration.class.isAssignableFrom(type.resolveGenerics()[0])) {
			return StreamSupport.stream(((Iterable<ClientRegistration>) clientRegistrationRepository).spliterator(), false)
					.collect(Collectors.toList());
		}
		return Collections.EMPTY_LIST;
	}
	
	

}
