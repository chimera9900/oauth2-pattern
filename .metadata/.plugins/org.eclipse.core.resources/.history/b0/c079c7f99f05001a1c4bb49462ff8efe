package com.developer.ui;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProvider;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;
import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {
	
	@Bean
	public WebClient webClient(OAuth2AuthorizedClientManager oauth2AuthorizedClientManager) {
		
		ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Config = 
				new ServletOAuth2AuthorizedClientExchangeFilterFunction(oauth2AuthorizedClientManager);
		
		return WebClient
				.builder()
				.apply(oauth2Config.oauth2Configuration())
				.build();
	}
	
	@Bean
	public OAuth2AuthorizedClientManager authorizedClientManager(ClientRegistrationRepository clientRegistrationRepository, 
			OAuth2AuthorizedClientRepository authorizedClientRepository) {
		
		DefaultOAuth2AuthorizedClientManager auth2AuthorizedClientManager = 
				new DefaultOAuth2AuthorizedClientManager(clientRegistrationRepository, authorizedClientRepository);
		
		OAuth2AuthorizedClientProvider authorizedClientProvider = OAuth2AuthorizedClientProviderBuilder.builder()
		.authorizationCode()
		.refreshToken()
		.build();
		
		 auth2AuthorizedClientManager
		 .setAuthorizedClientProvider(authorizedClientProvider);
		 
		 
		 return auth2AuthorizedClientManager;
		
	}

}
