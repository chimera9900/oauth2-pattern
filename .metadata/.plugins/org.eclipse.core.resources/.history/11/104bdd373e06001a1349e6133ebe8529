package com.developer.ui;

import static org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient
;

import java.net.URI;

import javax.servlet.http.HttpServletRequest;

import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.util.UriComponentsBuilder;

import com.developer.ui.ServicesConfig.ServiceConfig;



abstract class AbstractFlowController {
	
	protected static final String FLOW_TYPE_PARAMETER = "flowType";
	private final WebClient webClient;
	private final ServicesConfig servicesConfig;
	
	public AbstractFlowController(WebClient webClient, ServicesConfig servicesConfig) {
		this.webClient = webClient;
		this.servicesConfig = servicesConfig;
	}
	
	public ServiceCallResponse callService(String serviceId, OAuth2AuthorizedClient authorizedClient) {
		return callService(serviceId,authorizedClient,new LinkedMultiValueMap<>());
	}
	
	public ServiceCallResponse callService(String serviceId, 
			OAuth2AuthorizedClient authorizedClient,
			MultiValueMap<String, String> params) {
		ServiceConfig config = servicesConfig.getConfig(serviceId);
		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(config.getUri());
		if(!params.isEmpty()) {
			builder.queryParams(params);
		}
		
		URI uri = builder.build().toUri();
		
		return webClient.get()
				.uri(uri)
				.attributes(oauth2AuthorizedClient(authorizedClient))
				.retrieve()
				.bodyToMono(ServiceCallResponse.class)
				.block();
	}
	
	protected ServiceCallResponse fromUiApp(OAuth2AuthenticationToken oauth2Authentication,
			HttpServletRequest request,
			ServiceCallResponse... serviceCallResponses ) {
		
	}
	

}
